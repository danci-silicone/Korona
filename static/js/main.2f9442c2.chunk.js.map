{"version":3,"sources":["index.js"],"names":["mapboxgl","accessToken","Application","props","state","lng","lat","zoom","map","Map","container","this","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","addSource","type","data","cluster","clusterMaxZoom","clusterRadius","addLayer","id","source","filter","paint","layout","e","mag","tsunami","lokJedinica","coordinates","features","geometry","slice","properties","console","log","Math","abs","lngLat","Popup","setLngLat","setHTML","addTo","getCanvas","cursor","className","ref","el","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f9442c2.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"./site.css\";\n\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1IjoibWFjamltdWxhYyIsImEiOiJjazZvNzVrdDgwMDN3M2VxbHljdjF5Yzd4In0.rWPmBMx94_Z7RwLIXnXF4g\";\n\nmapboxgl.accessToken = MAPBOX_TOKEN;\n\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 15.9145,\n      lat: 43.89275,\n      zoom: 8,\n    };\n  }\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: \"mapbox://styles/macjimulac/ck822lxw108m61io4gyyl12q6\",\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n    });\n    map.on(\"move\", () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2),\n      });\n    });\n    map.on(\"load\", function () {\n      // Add a new source from our GeoJSON data and\n      // set the 'cluster' option to true. GL-JS will\n      // add the point_count property to your source data.\n      map.addSource(\"earthquakes\", {\n        type: \"geojson\",\n        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\n        data: \"https://demo7371634.mockable.io/korona\",\n        cluster: true,\n        clusterMaxZoom: 14, // Max zoom to cluster points on\n        clusterRadius: 50, // Radius of each cluster when clustering points (defaults to 50)\n      });\n\n      map.addLayer({\n        id: \"clusters\",\n        type: \"circle\",\n        source: \"earthquakes\",\n        filter: [\"has\", \"point_count\"],\n        paint: {\n          // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n          // with three steps to implement three types of circles:\n          //   * Blue, 20px circles when point count is less than 100\n          //   * Yellow, 30px circles when point count is between 100 and 750\n          //   * Pink, 40px circles when point count is greater than or equal to 750\n          \"circle-color\": [\n            \"step\",\n            [\"get\", \"point_count\"],\n            \"#f1f075\",\n            10,\n            \"#FF8C00\",\n            25,\n            \"#ff0000\",\n          ],\n          \"circle-radius\": [\"step\", [\"get\", \"point_count\"], 20, 10, 30, 75, 40],\n        },\n      });\n\n      map.addLayer({\n        id: \"cluster-count\",\n        type: \"symbol\",\n        source: \"earthquakes\",\n        filter: [\"has\", \"point_count\"],\n        layout: {\n          \"text-field\": \"{point_count_abbreviated}\",\n          \"text-font\": [\"DIN Offc Pro Medium\", \"Arial Unicode MS Bold\"],\n          \"text-size\": 12,\n        },\n      });\n\n      map.addLayer({\n        id: \"unclustered-point\",\n        type: \"circle\",\n        source: \"earthquakes\",\n        filter: [\"!\", [\"has\", \"point_count\"]],\n        paint: {\n          \"circle-color\": \"#00ff00\",\n          \"circle-radius\": 8,\n          \"circle-stroke-width\": 1,\n          \"circle-stroke-color\": \"#fff\",\n        },\n      });\n\n      // inspect a cluster on click\n      /*map.on(\"click\", \"clusters\", function (e) {\n        var features = map.queryRenderedFeatures(e.point, {\n          layers: [\"clusters\"],\n        });\n        var clusterId = features[0].properties.cluster_id;\n        map\n          .getSource(\"earthquakes\")\n          .getClusterExpansionZoom(clusterId, function (err, zoom) {\n            if (err) return;\n\n            map.easeTo({\n              center: features[0].geometry.coordinates,\n              zoom: zoom,\n            });\n          });\n      });*/\n\n      // inspect a cluster on click\n      map.on(\"click\", \"clusters\", function (e) {\n        var mag;\n        var tsunami;\n        var lokJedinica;\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var num = e.features[0].properties.type;\n        console.log(coordinates[0]);\n\n        if (coordinates[0] == 16.196508407592773) {\n          mag = \"Knin\";\n          tsunami = 12;\n          lokJedinica = \"Grad\";\n        } else if (coordinates[0] == 15.592517852783203) {\n          mag = \"Murter-Kurnati\";\n          tsunami = 27;\n          lokJedinica = \"Općina\";\n        } else if (coordinates[0] == 15.641162395477295) {\n          mag = \"Tisno\";\n          tsunami = 2;\n          lokJedinica = \"Općina\";\n        } else if (coordinates[0] == 15.778770446777344) {\n          mag = \"Vodice\";\n          tsunami = 4;\n          lokJedinica = \"Grad\";\n        } else if (coordinates[0] == 15.895071029663086) {\n          mag = \"Šibenik\";\n          tsunami = 9;\n          lokJedinica = \"Grad\";\n        } else if (coordinates[0] == 15.595865249633789) {\n          mag = \"Murter\";\n          tsunami = 29;\n          lokJedinica = \"Otok\";\n        } else if (\n          coordinates[0].toFixed(4) == (15.923223495483398).toFixed(4)\n        ) {\n          mag = \"Skradin\";\n          tsunami = 1;\n          lokJedinica = \"Grad\";\n        }\n\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n\n        new mapboxgl.Popup()\n          .setLngLat(coordinates)\n          .setHTML(lokJedinica + \": \" + mag + \"<br>Broj oboljelih: \" + tsunami)\n          .addTo(map);\n      });\n\n      map.on(\"mouseenter\", \"clusters\", function () {\n        map.getCanvas().style.cursor = \"pointer\";\n      });\n      map.on(\"mouseleave\", \"clusters\", function () {\n        map.getCanvas().style.cursor = \"\";\n      });\n\n      // When a click event occurs on a feature in\n      // the unclustered-point layer, open a popup at\n      // the location of the feature, with\n      // description HTML from its properties.\n      map.on(\"click\", \"unclustered-point\", function (e) {\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var mag = e.features[0].properties.mag;\n        var tsunami = e.features[0].properties.tsunami;\n        console.log(coordinates[0]);\n        var lokJedinica;\n\n        if (coordinates[0].toFixed(4) == (15.923223495483398).toFixed(4)) {\n          mag = \"Skradin\";\n          tsunami = 1;\n          lokJedinica = \"Grad\";\n        } else if (\n          coordinates[0].toFixed(4) == (16.155824661254883).toFixed(4)\n        ) {\n          mag = \"Drniš\";\n          tsunami = 1;\n          lokJedinica = \"Grad\";\n        } else if (\n          coordinates[0].toFixed(4) == (16.090164184570312).toFixed(4)\n        ) {\n          mag = \"Promina\";\n          tsunami = 1;\n          lokJedinica = \"Općina\";\n        }\n\n        /*if (e.features[0].properties.tsunami === 1) {\n          tsunami = \"yes\";\n        } else {\n          tsunami = \"no\";\n        }*/\n\n        // Ensure that if the map is zoomed out such that\n        // multiple copies of the feature are visible, the\n        // popup appears over the copy being pointed to.\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n\n        new mapboxgl.Popup()\n          .setLngLat(coordinates)\n          .setHTML(lokJedinica + \": \" + mag + \"<br>Broj oboljelih: \" + tsunami)\n          .addTo(map);\n      });\n\n      map.on(\"mouseenter\", \"clusters\", function () {\n        map.getCanvas().style.cursor = \"pointer\";\n      });\n      map.on(\"mouseleave\", \"clusters\", function () {\n        map.getCanvas().style.cursor = \"\";\n      });\n    });\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"sidebarStyle\">\n          {/*<div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{\" \"}\n            {this.state.zoom}\n          </div>*/}\n          <div>COVID-19 PODACI ZA ŠIBENSKO-KNINSKU ŽUPANIJU</div>\n          <div>STANJE NA DAN: 09. travnja 2020.</div>\n        </div>\n        <div ref={(el) => (this.mapContainer = el)} className=\"mapContainer\" />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Application />, document.getElementById(\"app\"));\n"],"sourceRoot":""}